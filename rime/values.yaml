# Default values for rime.
rime:
  loadBalancerSecurityGroups: ""
  loadBalancerTags: ""
  verbose: false
  consumersPerWorker: 5
  # Use a separate node group for model testing
  # TODO(andrew): RIME-10083 make agents configure node selectors instead of defining in the control plane
  separateModelTestingGroup: true
  enableApiKeyAuth: true
  ipAllowlist: []
  adminUsername: admin@robustintelligence.com
  adminPassword: adminpassword
  adminSecretName: rime-admin-secret
  # Override for Web App Host if manually creating routes to applications.
  webAppHostOverride: ""
  # Annotation for tagging Datadog logs at Pod level
  # Must be a valid JSON string
  datadogTagPodAnnotation:

firewall:
  enabled: true  # by default microservices are turned on

replicaCount: 1

backendImage:
  name: rime-backend
  pullPolicy: Never

frontendImage:
  name: rime-frontend
  pullPolicy: Never

modelTestImage:
  name: dev-rime-testing-engine
  pullPolicy: Never

imagePullSecrets:
  - name: rimecreds

nameOverride: ""
fullnameOverride: ""

rimeJwt: ""

service:
  type: ClusterIP

scheduledCT:
  scheduledCTCRON:
    # for v18 don't deploy this by default
    create: false
    # fifth minute of every hour
    schedule: "*/5 */1 * * *"


# Configuration variables for notifications.
notifications:
  digestCRON:
    create: true
    # By default, run the CRON job every 20 minutes.
    schedule: "*/20 * * * *"

rmqHealth:
  create: true
  resourceCleaner:
    create: true
    frequency: 5m
  metricsUpdater:
    create: true
    frequency: 1s

# Configuration variables for the image registry service.
imageRegistry:
  # Whether or not to create the image registry service.
  create: true
  # Configuration of the image registry server, which is meant to be overridden.
  config:
    imageRegistry:
      baseImage: {}
  # Specification of the container image used for running the image builder jobs.
  image:
    name: "rime-image-builder"
    pullPolicy: "Never"
  rbac:
    # If true, create & use RBAC resources
    create: true
    # Account used by the image registry service to start new image building jobs.
    # This account has special privileges to access and modify k8s' objects
    # and to create, access, and modify repositories in the image registry.
    serverAccount:
      create: true
      # The default name to use if not creating an account.
      # The true name is given by the `imageRegistryServerAccount.name` template.
      name: default
      annotations: {}
    # Account used by each image building job.
    # This account has special privileges to upload images to the image registry
    # service.
    jobAccount:
      create: true
      # The default name to use if not creating an account.
      # The true name is given by the `imageRegistryJobAccount.name` template.
      name: default
      # Account annotations; e.g. used to connect it with an IAM role.
      annotations: {}
  # Settings for the builder jobs that are spawned by the image registry
  builderJobs:
    # Allows the build jobs to run in privileged mode.
    # Generally this is considered dangerous and should only be enabled for
    # running in GCP where it is currently required.
    # TODO(blaine): Remove this option once we fix buildah issues on GCP.
    privilegedOverride: false
    backoffLimit: 2

# Configuration variables for the model testing service.
modelTesting:
  # The name of the configmap from which the agent will inject container env variables in the model test job
  configMapName: "rime-agent-model-testing-conf"
  allowExternalCustomImages: true
  rbac:
    # If true, create & use RBAC resources
    create: true
    # Account used by the model testing service to manage config maps and read pod logs
    serviceAccount:
      create: true
      # The default name to use if not creating an account.
      # The true name is given by the `modelTesting.serviceAccountName` template.
      name: default
      annotations: {}
  backoffLimit: 0

blobStore:
  rbac:
    # If true, create & use RBAC resources
    create: true
    # Account used by services that need access to blob storage.
    # This account has special priveleges to read and write to S3 bucket used for blob storage.
    blobStoreAccount:
      create: true
      # The default name to use if not creating an account.
      # The true name is given by the `blobStoreAccount.name` template.
      name: default
      annotations: {}
  # The bucket name of the S3 bucket used as the blob storage.
  storageBucketName: ""
  endpoint: "s3.amazonaws.com"
  type: "s3"

modelManager:
  create: false

modelCard:
  create: true

# Configuration for pods that expose Prometheus metrics.
prometheusMetricsExposition:
  # Global toggle for whether to expose metrics.
  enabled: true

  port: 8080
  path: "/metrics"

jobMonitoring:
  create: true

# These are the ports exposed out of the cluster for
# each external facing service.
ports:
  nativerestweb: 5555
  frontend: 80
  upload: 5000
  authServer: 5012  # REST port
  featureFlagServer: 5013
  featureFlagServerREST: 15013
  datasetManagerServer: 5009
  datasetManagerREST: 15009
  firewallServer: 5002
  firewallREST: 15002
  imageRegistryServer: 5010
  imageRegistryREST: 15010
  modelManagerServer: 5008
  modelTestingServer: 5003
  modelTestingREST: 15003
  notificationsWorker: 5007
  grpcWebServer: 5011
  grpcWebREST: 15011
  requestQueueProxy: 5014
  requestQueueProxyREST: 15014
  dataCollectorServer: 5015
  dataCollectorREST: 15015
  agentManagerServer: 5016
  agentManagerREST: 15016
  userServer: 5017
  userServerREST: 15017
  modelCardServer: 5018
  modelCardREST: 15018

resources:
  requests:
    memory: "100Mi"
    cpu: "100m"
  limits:
    memory: "500Mi"
    cpu: "500m"

grpcWebServerResources:
  requests:
    memory: "100Mi"
    cpu: "100m"
  limits:
    memory: "500Mi"
    cpu: "500m"

grpcWebServerReplicas:
  minReplicas: 1
  maxReplicas: 10

featureFlagResources:
  requests:
    memory: "100Mi"
    cpu: "100m"
  limits:
    memory: "500Mi"
    cpu: "500m"

featureFlagReplicas:
  minReplicas: 1
  maxReplicas: 10

modelTestResources:
  requests:
    memory: "4000Mi"
    cpu: "1500m"

authResources:
  requests:
    memory: "300Mi"
    cpu: "300m"
  limits:
    memory: "500Mi"
    cpu: "500m"

frontendResources:
  requests:
    memory: "2000Mi"
    cpu: "800m"
  limits:
    memory: "2500Mi"
    cpu: "1000m"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Database setup configuration (creating indices, schema validation, migrations).
databaseSetup:
  indexCreationHook:
    enabled: true
    # Only run the job once by default.
    backoffLimit: 0

    # THIS MAY DELETE CUSTOMER DATA if enabled; be careful.
    dropDuplicates: false

  initClusterMetadataHook:
    enabled: true
    # Only run the job once by default.
    backoffLimit: 0
    overwriteLicense: false

  # Whether to run the database setup hooks in debug mode.
  # If a pod fails in debug mode, it will sleep for a time so the pod can be inspected.
  debug: true

vaultBootstrap:
  enabled: true
  # If a pod fails in debug mode, it will sleep for a time so the pod can be inspected.
  debug: true
  backoffLimit: 2

mongodb:
  image:
    registry: "docker.io"
    repository: "robustintelligencehq/mongodb"
    tag: "5.0.9-debian-11-r7"
  architecture: "replicaset"
  replicaCount: 3
  arbiter:
    enabled: false
  auth:
    enabled: false
  service:
    port: 27017
  replicaSetName: rs0
  resources:
    requests:
      memory: "3000Mi"
      cpu: "1500m"
    limits:
      memory: "8000Mi"
      cpu: "2000m"
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
    ad.datadoghq.com/mongodb.check_names: '["mongo"]'
    ad.datadoghq.com/mongodb.init_configs: '[{}]'
    ad.datadoghq.com/mongodb.instances: |
      [
        {
          "hosts": ["%%host%%:%%port%%"],
          "database": "rime-store",
          "additional_metrics": ["collection"],
          "collections": ["project", "docstore-notif-setting", "docstore-firewall", "UserV0"]
        }
      ]
    ad.datadoghq.com/mongodb.logs: '[{"source":"mongodb","service":"mongodb"}]'

directory:
  storePath: /mnt/rime-store

ingress-nginx:
  controller:
    image:
      registry: "docker.io"
      image: "robustintelligencehq/ingress-nginx-controller"
      tag: "v1.3.1"
      digest: "sha256:d3642f55a6a7a102a9a579b3382fe73869c73890de4c94f28e36ba5e07925944"
    ingressClassResource:
      enabled: false
    admissionWebhooks:
      enabled: false
    service:
      targetPorts:
        http: http
        https: http
    config:
      force-ssl-redirect: "false"
      ssl-redirect: "false"
    resources:
      requests:
        cpu: 100m
        memory: 90Mi

kong:
  deployment:
    kong:
      enabled: false
  image:
    repository: "docker.io/robustintelligencehq/kong"
    tag: "2.8"
  ingressController:
    enabled: false
    ingressClass: kong
    image:
      repository: "docker.io/robustintelligencehq/kong-kubernetes-ingress-controller"
      tag: "2.2"
  proxy:
    enabled: false
    http:
      parameters:
        - http2
    tls:
      overrideServiceTargetPort: 8000
  plugins:
    configMaps:  # change this to 'secrets' if you created a secret
      - name: kong-plugin-custom-key-auth-headers
        pluginName: custom-key-auth

redis:
  image:
    registry: "docker.io"
    repository: "robustintelligencehq/redis"
    tag: "7.0.4-debian-11-r4"
  architecture: "standalone"
  auth:
    enabled: false
  master:
    resources:
      requests:
        memory: "500Mi"
        cpu: "500m"
      limits:
        memory: "1000Mi"
        cpu: "1000m"
    persistence:
      enabled: true
  podAnnotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "false"

datasetManager:
  useFileUploadService: false

vault:
  global:
    enabled: true
    tlsDisable: true
  injector:
    enabled: true
    # Use the Vault K8s Image https://github.com/hashicorp/vault-k8s/
    image:
      repository: "docker.io/robustintelligencehq/vault-k8s"
      tag: "v1.0"
    resources:
      requests:
        memory: 64Mi
        cpu: 250m
      limits:
        memory: 128Mi
        cpu: 500m
  server:
    # Use the opensource image instead of Enterprise Image
    image:
      repository: "docker.io/robustintelligencehq/vault"
      tag: "v1.11.3"
    # These Resource Limits are in line with node requirements in the
    # Vault Reference Architecture for a Small Cluster
    resources:
      requests:
        memory: 64Mi
        cpu: 250m
      limits:
        memory: 128Mi
        cpu: 500m
    # For HA configuration and because we need to manually init the vault,
    # we need to define custom readiness/liveness Probe settings
    readinessProbe:
      enabled: true
      path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
    standalone:
      enabled: false
    # Run Vault in "HA" mode.
    ha:
      enabled: true
      replicas: 1
      raft:
        enabled: true
        setNodeId: true

        config: |
          listener "tcp" {
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            tls_disable = true
          }
          storage "raft" {
            path = "/vault/data"
          }
          service_registration "kubernetes" { }
