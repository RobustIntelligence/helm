rimeAgent:
  # @ignored
  verbose: true
  # @ignored -- Override for the chart name. If used, this will be appended to the
  # release name to form the fully qualified app name
  # (e.g., `rime-${nameOverride}` instead of just `rime`)
  nameOverride: ""
  # @ignored -- Override for the fully qualified app name used across services.
  # If specified, `nameOverride` will be ignored.
  fullnameOverride: ""
  # @ignored -- Common annotations added to all K8s resources
  commonAnnotations: {}
  # @ignored -- Common labels added to all K8s resources
  commonLabels: {}
  # -- Whether this agent is running within the same K8s cluster as the control plane.
  isInternal: false

  # -- unique ID for this Agent. Can be left blank if this is a internal agent.
  # This id is provided by the RI Platform Control Plane when creating external agents.
  # For internal agents, this field is not used.
  id:

  # -- The API key the agent will use to communicate with the RI Platform.
  # Required for external agents.
  apiKey:
  # -- Name of an existing K8s secret containing the API key.
  # If existingSecretName is set, the secret will not be created. Must have api-key set.
  existingSecretName: ""

  # -- Pre-configured json encoded string of K8s docker config secret
  # Providing `rimeAgent.dockerCredentialsPayload` will override any provided inputs in rimeAgent.dockerCredentials
  dockerCredentialsPayload:  # '{"auths":{"https://index.docker.io/v2/":{"auth":"cm9...hZA="}}}'

  # -- Image specification for the Agent.
  # @default -- (see individual values in `values.yaml`)
  images:
    # Specify this value to use existing image pull secrets in your K8s cluster (overriding rimeAgent.dockerCredentials).
    # Note that the credentials should provide access to both the Agent image and Model Testing images.
    imagePullSecrets: []
    # Image specification for the agent's operational services.
    agentImage:
      # The registry of the agent image.
      registry: "docker.io"
      # The name and tag of the rime agent image.
      name: "robustintelligencehq/rime-agent:latest"
      # See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
      pullPolicy: "Always"
    # Image specification for the ephemeral model testing jobs.
    modelTestJobImage:
      # The registry of the default model test job image.
      registry: "docker.io"
      # Image name for running model test jobs.
      name: "robustintelligencehq/rime-testing-engine-dev:latest"
      # Image pull policy for model test jobs.
      pullPolicy: "Always"

  # -- Service addresses for the agent.
  # @default -- (see individual values in `values.yaml`)
  connections:
    # The address of the RI Platform this agent should communicate with.
    # Required for external agents.
    platformAddress:  # your-company.rbst.io
    # Internal address of the Control Plane's grpc upload server.
    # (This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane)
    uploadServerAddress: rime-upload-server:5000
    # Internal address of the Control Plane's grpc agent management service.
    # (This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane)
    agentManagerAddress: rime-agent-manager-server:15000
    # Internal address of the Control Plane's upload server.
    # (This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane)
    uploadServerRestAddress: rime-upload-server:15001
    # Internal address of the Control Plane's firewall server.
    # (This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane)
    firewallServerRestAddress: rime-firewall-server:15002
    # Internal address of the Control Plane's data collector server.
    # (This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane)
    dataCollectorRestAddress: rime-data-collector-server:15015
    # Internal address of the Control Plane's dataset manager server.
    # (This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane)
    datasetManagerRestAddress: rime-dataset-manager-server:15009

  # -- `monitoring` (Datadog) K8s-level configurations
  # @default -- (see individual values in `values.yaml`)
  monitoring:
    # -- Whether to enable Prometheus metrics for all services on the RIME agent
    enabled: true
    # -- Port to expose Prometheus metrics on
    port: 8080
    # -- Whether to enable Datadog autodiscovery tags for all services on the RIME agent
    datadogEnabled: true

  # -- `registerAgent` K8s-level configurations
  # @default -- (see individual values in `values.yaml`)
  registerAgent:
    name: "register-agent"
    serviceAccount:
      create: true
      # If not set and create is true, a name is generated using the fullname template
      name:
      annotations: {}
      labels: {}
    backoffLimit: 2
    deployment:
      annotations: {}
      labels: {}
      resources:
        limits:
          memory: "100Mi"
        requests:
          memory: "100Mi"
          cpu: "100m"

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

  # -- `launcher` K8s-level configurations
  # @default -- (see individual values in `values.yaml`)
  launcher:
    name: "launcher"
    backendID: 14
    serviceAccount:
      create: true
      # If not set and create is true, a name is generated using the fullname template
      name:
      annotations: {}
      labels: {}
    deployment:
      annotations: {}
      labels: {}
      resources:
        limits:
          memory: "500Mi"
          cpu: "500m"
        requests:
          memory: "100Mi"
          cpu: "100m"

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

  # -- `rime-cross-plane-server` K8s-level configurations
  # @default -- (see individual values in `values.yaml`)
  rimeCrossPlaneServer:
    name: "rime-cross-plane-server"
    backendID: 13
    port: 50051
    service:
      type: ClusterIP
      annotations: {}
      labels: {}
    hpa:
      enabled: true
      annotations: {}
      labels: {}
      minReplicas: 1
      maxReplicas: 10
      metrics:
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 60
    serviceAccount:
      create: true
      # If not set and create is true, a name is generated using the fullname template
      name:
      annotations: {}
      labels: {}
    deployment:
      annotations: {}
      labels: {}
      # Replica count for the cross-plane-server. Only used if HPA is disabled.
      replicaCount: 3
      resources:
        limits:
          memory: "10000Mi"
        requests:
          memory: "10000Mi"
          cpu: "100m"

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

  # -- `operator` K8s-level configurations
  # @default -- (see individual values in `values.yaml`)
  operator:
    name: "operator"
    serviceAccount:
      create: true
      # If not set and create is true, a name is generated using the fullname template
      name:
      annotations: {}
      labels: {}
    deployment:
      annotations: {}
      labels: {}
      resources:
        limits:
          cpu: 500m
          memory: 1000Mi
        requests:
          cpu: 500m
          memory: 300Mi

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    # -- `model-testing-job` K8s-level configurations
    # @default -- (see individual values in `values.yaml`)
    modelTestJob:
      name: "model-testing-job"
      backendID: 20
      annotations: {}
      labels: {}
      backoffLimit: 0
      # Active deadline of job in seconds (default to 72 hours).
      activeDeadlineSeconds: 259200
      # TTL for jobs after finished in seconds (default to 48 hours).
      ttlSecondsAfterFinished: 172800
      resources:
        limits:
          cpu: 3000m
          memory: 8000Mi
        requests:
          cpu: 3000m
          memory: 8000Mi

      # Configure rbac ServiceAccount for the jobs launched by this agent. For example, granting S3 read permissions.
      serviceAccount:
        # Specifies whether a ServiceAccount should be created.
        create: true
        # Specify a preexisting ServiceAccount to use if create is false.
        name:
        # If create is true, annotations to add to the service account.
        # Since data is stored in a cloud storage (e.g. S3, GCS), add an annotation to allow read access here.
        # Azure IAM setup: https://azure.github.io/azure-workload-identity/docs/
        annotations: {}
          # EKS IAM setup for S3: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
          # eks.amazonaws.com/role-arn: <S3 read access role arn>

          # GKE IAM setup for GCS: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
          # iam.gke.io/gcp-service-account: <GCS service account email>

          # Azure IAM setup: https://azure.github.io/azure-workload-identity/docs/
          # azure.workload.identity/client-id: <Azure workload identity client ID>
          # azure.workload.identity/tenant-id: <Azure workload identity tenant ID>

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    # -- `cross-plane-job` K8s-level configurations
    # @default -- (see individual values in `values.yaml`)
    crossPlaneRPCJob:
      name: "cross-plane-job"
      backendID: 21
      annotations: {}
      labels: {}
      backoffLimit: 0
      # Active deadline of job in seconds (default to 5 minutes).
      activeDeadlineSeconds: 300
      # TTL for jobs after finished in seconds (default to 5 minutes).
      ttlSecondsAfterFinished: 300
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 100m
          memory: 60Mi
      # Configure rbac ServiceAccount for the jobs launched by this agent. For example, granting S3 read permissions.

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

    # -- Configuration for RIME Job Log Archival (persistence of job logs for debugging).
    # @default -- (see individual values in `values.yaml`)
    logArchival:
      enabled: false
      # The S3 destination for log archives.
      storageBucketName:
      endpoint: "s3.amazonaws.com"
      type: "s3"
      serviceAccount:
        # Account used by services that need access to blob storage.
        # This account requires privileges to read and write to S3 bucket used for blob storage.
        annotations: {
          eks.amazonaws.com/role-arn:
        }

  fileServer:
    enabled: false
    name: "file-server"
    port: 5022
    config:
      # -- The bucket name of the S3 bucket used as the blob storage.
      storageBucketName: ""
      endpoint: "s3.amazonaws.com"
      type: "s3"
    # -- Account used by services that need access to blob storage.
    serviceAccount:
      create: true
      name: ""
      annotations: {
        # -- Specify ARN of IRSA-enabled Blob Storage IAM role here
        eks.amazonaws.com/role-arn: ""
      }
      labels: {}
    service:
      type: ClusterIP
      annotations: {}
      labels: {}
    hpa:
      annotations: {}
      labels: {}
      enabled: true
      minReplicas: 1
      maxReplicas: 10
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    deployment:
      annotations: {}
      labels: {}
      replicaCount: 1
      resources:
        limits:
          memory: 90Mi
        requests:
          cpu: 100m
          memory: 90Mi

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      nodeSelector: {}

      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}

# -- Mutual TLS configuration for internal agent.
# @default -- (see individual values in `values.yaml`)
tls:
  crossplaneEnabled: false
  # -- Whether to enable the cert-manager service for issuing and managing TLS certificates within the cluster
  enableCertManager: false
  # -- `spec` for Certificate object (https://cert-manager.io/docs/usage/certificate/).
  certificateSpec:
    # -- See https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec
    # Attributed listed below are the minimum required for the `subject` property.
    subject:
      organizations:
        - RobustIntelligence
    # -- See https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec
    # Attributes listed below are the minimum required `issuerRef` property.
    issuerRef:
      # -- Will default to `rime-{{ .Release.Namespace }}-ca-issuer`.
      name: ""
      kind: Issuer
      group: cert-manager.io
