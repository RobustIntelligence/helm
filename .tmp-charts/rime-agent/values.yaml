rimeAgent:
  verbose: true
  nameOverride:
  fullNameOverride:
  commonAnnotations: {}
  commonLabels: {}
  isInternal: false

  images:
    # rimeAgent.images.imagePullSecrets -- use existing image pull secrets in your k8s cluster, overriding rimeAgent.dockerCredentials
    ## Note that the credentials should provide access to both the Agent image and model testing images.
    imagePullSecrets: []
    agentImage:
      # rimeAgent.images.agentImage.registry -- the registry of the agent image.
      registry: "docker.io"
      # rimeAgent.images.agentImage.name -- the name and tag of the rime agent image.
      name: "robustintelligencehq/rime-agent:latest"
      # rimeAgent.images.agentImage.pullPolicy -- see https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
      pullPolicy: Always
    modelTestJobImage:
      # rimeAgent.images.modelTestJobImage.registry -- the registry of the default model test job image.
      registry: "docker.io"
      # rimeAgent.images.modelTestJobImage.name  -- image name for running model test jobs.
      name: "robustintelligencehq/rime-testing-engine-dev:latest"
      # rimeAgent.images.modelTestJobImage.pullPolicy -- image pull policy for model test jobs.
      pullPolicy: "Always"

  # rimeAgent.id -- unique ID for this Agent. Can be left blank if this is a internal agent.

  ## This id is provided by the RI Platform Control Plane when creating external agents.
  ## For internal agents, this field is not used, and the internal agent will register with the
  ## Control Plane during startup and get the ID to use at that point.
  id:

  # rimeAgent.apiKey -- the API key the agent will use to communicate with the RI Platform.

  ## If not set, the agent must be installed in the same cluster as the RI Platform.
  apiKey:

  # rimeAgent.dockerCredentialsPayload -- pre-configured json encoded string of k8s docker config secret

  ## providing rimeAgent.dockerCredentialsPayload will override any provided inputs in rimeAgent.dockerCredentials
  dockerCredentialsPayload:  # '{"auths":{"https://index.docker.io/v2/":{"auth":"cm9...hZA="}}}'

  connections:
    # rimeAgent.platformAddress -- the address of the RI Platform this agent should communicate with.

    ## If not set, the agent must be installed in the same cluster as the RI Platform and you will need to specify all the internal addresses below.
    platformAddress:  # your-company.rbst.io
    # rimeAgent.uploadServerAddress -- internal address of the Control Plane's grpc upload server.

    ## This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane
    uploadServerAddress: rime-upload-server:5000
    # rimeAgent.agentManagerAddress -- internal address of the Control Plane's grpc agent management service.

    ## This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane
    agentManagerAddress: rime-agent-manager-server:15000
    # rimeAgent.uploadServerRestAddress -- internal address of the Control Plane's upload server.

    ## This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane
    uploadServerRestAddress: rime-upload-server:15001
    # rimeAgent.firewallServerAddress -- internal address of the Control Plane's firewall server.

    ## This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane
    firewallServerRestAddress: rime-firewall-server:15002
    # rimeAgent.dataCollectorRestAddress -- internal address of the Control Plane's data collector server.

    ## This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane
    dataCollectorRestAddress: rime-data-collector-server:15015
    # rimeAgent.datasetManagerRestAddress -- internal address of the Control Plane's data collector server.

    ## This value will be ignored for external agents that use rimeAgent.platformAddress to connect to the control plane
    datasetManagerRestAddress: rime-dataset-manager-server:15009

  launcher:
    name: "launcher"
    serviceAccount:
      # Specifies whether a ServiceAccount should be created
      create: true
      # The name of the ServiceAccount to use.
      # If not set and create is true, a name is generated using the fullname template
      name:
      annotations: {}
      labels: {}
    deployment:
      annotations: {}
      labels: {}
      resources:
        requests:
          memory: "100Mi"
          cpu: "100m"
        limits:
          memory: "500Mi"
          cpu: "500m"

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      ## Extra env variables to add to the deployment. Make sure these don't
      ## conflict with the ones already defined in the deployment.
      ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      #
      extraEnv: []
      ## Extra volumes to add to the deployment. Make sure these don't
      ## conflict with the ones already defined in the deployment.
      ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-coreim gonn
      #
      extraVolumes: []
      ## Extra volume mounts to add to the deployment. Make sure these don't
      ## conflict with the ones already defined in the deployment.
      ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      #
      extraVolumeMounts: []
      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      #
      nodeSelector: {}
      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      ##
      tolerations: []
      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      ##
      affinity: {}

  operator:
    name: "operator"
    serviceAccount:
      create: true
      name: ""
      annotations: {}
      labels: {}
    deployment:
      annotations: {}
      labels: {}
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 500m
          memory: 128Mi

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      ## Extra env variables to add to the deployment. Make sure these don't
      ## conflict with the ones already defined in the deployment.
      ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      #
      extraEnv: []
      ## Extra volumes to add to the deployment. Make sure these don't
      ## conflict with the ones already defined in the deployment.
      ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-coreim gonn
      #
      extraVolumes: []
      ## Extra volume mounts to add to the deployment. Make sure these don't
      ## conflict with the ones already defined in the deployment.
      ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      #
      extraVolumeMounts: []
      ## Node labels for pod assignment
      ## ref: https://kubernetes.io/docs/user-guide/node-selection/
      #
      nodeSelector: {}
      ## Tolerations for pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      ##
      tolerations: []
      ## Affinity for pod assignment (evaluated as template)
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      ##
      affinity: {}
    ## Configurations related to the model testing jobs launched by this agent.
    modelTestJob:
      name: "model-testing-job"
      annotations: {}
      labels: {}
      # rimeAgent.operator.modelTestJob.image -- default image specification for the image used by model test jobs.
      # rimeAgent.operator.modelTestJob.backoffLimit -- backoff limit for mode test jobs.
      backoffLimit: 0
      # rimeAgent.operator.modelTestJob.activeDeadlineSeconds -- active deadline of job in seconds.
      # Default to 72 hours.
      activeDeadlineSeconds: 259200
      # rimeAgent.operator.modelTestJob.ttlSecondsAfterFinished -- TTL for jobs after finished in seconds.
      # Default to 48 hours.
      ttlSecondsAfterFinished: 172800
      ## Configure rbac ServiceAccount for the jobs launched by this agent. For example, granting S3 read permissions.
      serviceAccount:
        # rimeAgent.operator.modelTestJob.serviceAccount.create -- Specifies whether a ServiceAccount should be created.
        create: true
        # rimeAgent.operator.modelTestJob.serviceAccount.name -- Specify a preexisting ServiceAccount to use if create is false.
        name:
        # rimeAgent.operator.modelTestJob.serviceAccount.annotations -- if create is true, annotations to add to the service account.
        ## Since data is stored in a cloud storage (e.g. S3, GCS), add an annotation to allow read access here.
        ## EKS IAM setup for S3: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
        ## GKE IAM setup for GCS: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
        annotations: {}
        #   eks.amazonaws.com/role-arn: <S3 read access role arn>
        #   iam.gke.io/gcp-service-account: <GCS service account email>
      # rimeAgent.operator.modelTestJob.resources -- resource request and limits for model test jobs.
      resources:
        limits:
          cpu: 3000m
          memory: 8000Mi
        requests:
          cpu: 3000m
          memory: 8000Mi

      # SecurityContext to add to the deployment. Default is just set to not run as root.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#securitycontext-v1-core
      securityContext: {}

      # Extra env variables to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#envvar-v1-core
      extraEnv: []

      # Extra volumes to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumedevice-v1-core
      extraVolumes: []

      # Extra volume mounts to add to the deployment. Make sure these don't
      # conflict with the ones already defined in the deployment.
      # ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#volumemount-v1-core
      extraVolumeMounts: []

      # rimeAgent.operator.modelTestJob.nodeSelector -- node selector for model test jobs.
      nodeSelector: {}
      # rimeAgent.operator.modelTestJob.tolerations -- tolerations for model test jobs.
      tolerations: []
      # rimeAgent.operator.modelTestJob.affinity -- affinity for model test jobs.
      affinity: {}

    logArchival:
      enabled: false

tls:
  crossplaneEnabled: false
  enableCertManager: false
